version: '3.8'

services:
  server:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - $ENV
    expose:
      - $NUGC_SERVER_PORT
    volumes:
      - .:/app
    command: >
      sh -c "cd /app/src
      && gunicorn --reload --worker-class aiohttp.GunicornWebWorker --workers 2 --bind 0.0.0.0:$NUGC_SERVER_PORT ugc.main:create_app"
    depends_on:
      kafka:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ugc_api.rule=Host(`api-ugc.localhost`,`traefik`)"
      - "traefik.http.routers.ugc_api.entrypoints=web"

  zookeeper-kafka:
    platform: linux/amd64
    image: confluentinc/cp-zookeeper:7.1.1
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    healthcheck:
      test: nc -z localhost 2181 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  kafka:
    platform: linux/amd64
    image: confluentinc/cp-kafka:7.1.1
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-kafka:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS=kafka:29092
      - CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS=1
      - CONFLUENT_METRICS_ENABLE=true
      - CONFLUENT_SUPPORT_CUSTOMER_ID=anonymous
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 15s
    depends_on:
      zookeeper-kafka:
        condition: service_healthy

  init-kafka:
    platform: linux/amd64
    image: confluentinc/cp-kafka:7.1.1
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic progress-topic --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic bookmarks-topic --replication-factor 1 --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    depends_on:
      kafka:
        condition: service_healthy

  zookeeper-clickhouse:
    platform: linux/amd64
    image: zookeeper:3.8.0
    healthcheck:
      test: nc -z localhost 2181 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  clickhouse-server-01:
    restart: on-failure
    build:
      context: .
      dockerfile: ./conf/clickhouse/docker/Dockerfile
    volumes:
      - ./conf/clickhouse/config/node-1:/etc/clickhouse-server
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9009:9009"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8123/ping || exit 1
      interval: 3s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_started
      zookeeper-clickhouse:
        condition: service_healthy

  clickhouse-server-02:
    image: clickhouse/clickhouse-server:22
    volumes:
      - ./conf/clickhouse/config/node-2:/etc/clickhouse-server
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8123/ping || exit 1
      interval: 3s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_started
      zookeeper-clickhouse:
        condition: service_healthy
      clickhouse-server-01:
        condition: service_started

  clickhouse-server-03:
    image: clickhouse/clickhouse-server:22
    volumes:
      - ./conf/clickhouse/config/node-3:/etc/clickhouse-server
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8123/ping || exit 1
      interval: 3s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_started
      zookeeper-clickhouse:
        condition: service_healthy
      clickhouse-server-01:
        condition: service_started

  clickhouse-server-04:
    image: clickhouse/clickhouse-server:22
    volumes:
      - ./conf/clickhouse/config/node-4:/etc/clickhouse-server
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8123/ping || exit 1
      interval: 3s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_started
      zookeeper-clickhouse:
        condition: service_healthy
      clickhouse-server-01:
        condition: service_started

  traefik:
    image: traefik:v2.7
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingParam=0"
      - "--tracing.jaeger.traceContextHeaderName=X-Request-Id"
    ports:
      - "8010:80"
      - "8083:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      - server

  schema-registry:
    platform: linux/amd64
    image: confluentinc/cp-schema-registry:7.1.1
    restart: on-failure
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=kafka:29092
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8051
    ports:
      - "8051:8081"
    depends_on:
      kafka:
        condition: service_healthy

  connect:
    platform: linux/amd64
    image: cnfldemos/cp-server-connect-datagen:0.5.3-7.1.0
    restart: on-failure
    environment:
      - CONNECT_BOOTSTRAP_SERVERS=kafka:29092
      - CONNECT_REST_ADVERTISED_HOST_NAME=connect
      - CONNECT_GROUP_ID=compose-connect-group
      - CONNECT_CONFIG_STORAGE_TOPIC=docker-connect-configs
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_FLUSH_INTERVAL_MS=10000
      - CONNECT_OFFSET_STORAGE_TOPIC=docker-connect-offsets
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_TOPIC=docker-connect-status
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.storage.StringConverter
      - CONNECT_VALUE_CONVERTER=io.confluent.connect.avro.AvroConverter
      - CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CLASSPATH=/usr/share/java/monitoring-interceptors/monitoring-interceptors-7.1.0.jar
      - CONNECT_PRODUCER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      - CONNECT_CONSUMER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      - CONNECT_PLUGIN_PATH=/usr/share/java,/usr/share/confluent-hub-components
      - CONNECT_LOG4J_LOGGERS=org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    ports:
      - "8054:8083"
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_started

  control-center:
    platform: linux/amd64
    image: confluentinc/cp-enterprise-control-center:7.1.1
    restart: on-failure
    environment:
      - CONTROL_CENTER_BOOTSTRAP_SERVERS=kafka:29092
      - CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER=connect:8083
      - CONTROL_CENTER_KSQL_KSQLDB1_URL=http://ksqldb-server:8088
      - CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL=http://localhost:8053
      - CONTROL_CENTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CONTROL_CENTER_REPLICATION_FACTOR=1
      - CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS=1
      - CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS=1
      - CONFLUENT_METRICS_TOPIC_REPLICATION=1
      - PORT=9021
    ports:
      - "9021:9021"
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_started
      connect:
        condition: service_started
      ksqldb-server:
        condition: service_started

  ksqldb-server:
    platform: linux/amd64
    image: confluentinc/cp-ksqldb-server:7.1.1
    restart: on-failure
    environment:
      - KSQL_CONFIG_DIR=/etc/ksql
      - KSQL_BOOTSTRAP_SERVERS=kafka:29092
      - KSQL_HOST_NAME=ksqldb-server
      - KSQL_LISTENERS=http://0.0.0.0:8053
      - KSQL_CACHE_MAX_BYTES_BUFFERING=0
      - KSQL_KSQL_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - KSQL_PRODUCER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      - KSQL_CONSUMER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      - KSQL_KSQL_CONNECT_URL="http://connect:8083"
      - KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR=1
      - KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE=true
      - KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE=true
    ports:
      - "8053:8088"
    depends_on:
      kafka:
        condition: service_healthy
      connect:
        condition: service_started

  ksqldb-cli:
    platform: linux/amd64
    image: confluentinc/cp-ksqldb-cli:7.1.1
    entrypoint: /bin/sh
    tty: true
    depends_on:
      kafka:
        condition: service_healthy
      connect:
        condition: service_started
      ksqldb-server:
        condition: service_started

  ksql-datagen:
    platform: linux/amd64
    image: confluentinc/ksqldb-examples:7.1.1
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:29092 1 40 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 40 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 11 && \
                       tail -f /dev/null'"
    environment:
      - KSQL_CONFIG_DIR=/etc/ksql
      - STREAMS_BOOTSTRAP_SERVERS=kafka:29092
      - STREAMS_SCHEMA_REGISTRY_HOST=schema-registry
      - STREAMS_SCHEMA_REGISTRY_PORT=8081
    depends_on:
      kafka:
        condition: service_healthy
      ksqldb-server:
        condition: service_started
      schema-registry:
        condition: service_started
      connect:
        condition: service_started

  rest-proxy:
    platform: linux/amd64
    image: confluentinc/cp-kafka-rest:7.1.1
    restart: on-failure
    environment:
      - KAFKA_REST_HOST_NAME=rest-proxy
      - KAFKA_REST_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_REST_LISTENERS=http://0.0.0.0:8052
      - KAFKA_REST_SCHEMA_REGISTRY_URL=http://schema-registry:8081
    ports:
      - "8052:8082"
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_started
